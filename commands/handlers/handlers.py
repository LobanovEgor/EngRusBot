from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from commands.keyboard import all_kb
from commands.keyboard.all_kb import user_dict_kb
from database import database as db
from database.database import get_random_word, add_word_to_user, get_user_words, add_skipped_word

router = Router()
@router.message(Command('start'))
async def cmd_start(message: Message):
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç –Ω—É–∂–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–≥–ª–æ-—Ä—É—Å—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è!',
                         reply_markup=all_kb.main_kb())
    await db.add_user(message.from_user.id)



class States(StatesGroup):
    waiting_for_input = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å–ª–æ–≤–∞
    waiting_for_approve = State()
    choose_pages = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ"
@router.message(F.text.lower() == 'üìù –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ')
async def add_word(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ —Ç–∏—Ä–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: apple - —è–±–ª–æ–∫–æ)")
    await state.set_state(States.waiting_for_input)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
@router.message(States.waiting_for_input)
async def process_word_input(message: Message, state: FSMContext):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞
        if "-" not in message.text:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–∏—Ä–µ –º–µ–∂–¥—É —Å–ª–æ–≤–æ–º –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–º.")
            return

        # –†–∞–∑–¥–µ–ª—è–µ–º —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥
        word = message.text
        id = message.from_user.id

        await db.add_word_to_user(
            telegram_id=id,
            word=word
        )

        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {word}")
        await state.clear()  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

@router.message(F.text.lower() == 'üé≤ —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ')
async def rand_word(message: Message, state: FSMContext):
    word = await get_random_word(message.from_user.id)
    await message.answer(f'{word}', reply_markup=all_kb.approve_kb())
    await state.set_state(States.waiting_for_approve)
    await state.update_data(current_word=word)

@router.callback_query(F.data == 'add_word', States.waiting_for_approve)
async def approve_word(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    word = data['current_word']
    await add_word_to_user(callback.from_user.id, word)
    await callback.message.answer(text=f'‚úÖ –°–ª–æ–≤–æ "{word[0:word.find("‚Äî") - 1]}" –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–∞—à —Å–ª–æ–≤–∞—Ä—å!')
    await state.clear()
    await callback.answer()
    await callback.message.delete()

@router.callback_query(F.data == 'skip_word', States.waiting_for_approve)
async def skip_word(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    word = data['current_word']
    await add_skipped_word(callback.from_user.id, word)
    await callback.message.answer("‚è© –°–ª–æ–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
    await state.clear()
    await callback.answer()
    await callback.message.delete()


@router.message(F.text.lower() == 'üìö –º–æ–π —Å–ª–æ–≤–∞—Ä—å')
async def user_words(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    all_words = await get_user_words(message.from_user.id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü, —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤
    await state.update_data(
        page=0,
        total_pages=(len(all_words) + 9) // 10,  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
        all_words=all_words
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    current_data = await state.get_data()
    page = current_data['page']
    words_chunk = current_data['all_words'][page * 10: (page + 1) * 10]

    words_text = "\n\n".join([f"{i + 1}. {word}" for i, word in enumerate(words_chunk, start=page * 10)])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    await message.answer(
        f"üìö –í–∞—à —Å–ª–æ–≤–∞—Ä—å (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{current_data['total_pages']}):\n\n{words_text}",
        reply_markup=user_dict_kb(has_previous=False, has_next=current_data['total_pages'] > 1)
    )
    await state.set_state(States.choose_pages)


@router.callback_query(F.data.in_(['next_page', 'prev_page']), States.choose_pages)
async def handle_pagination(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_page = data['page']
    total_pages = data['total_pages']
    all_words = data['all_words']

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    new_page = current_page + 1 if callback.data == 'next_page' else current_page - 1

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
    if new_page < 0 or new_page >= total_pages:
        await callback.answer("–ë–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ—Ç!")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(page=new_page)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    words_chunk = all_words[new_page * 10: (new_page + 1) * 10]
    words_text = "\n\n".join([f"{i + 1}. {word}" for i, word in enumerate(words_chunk, start=new_page * 10)])

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    updated_kb = user_dict_kb(
        has_previous=new_page > 0,
        has_next=new_page < total_pages - 1
    )

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(
        f"üìö –í–∞—à —Å–ª–æ–≤–∞—Ä—å (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {new_page + 1}/{total_pages}):\n\n{words_text}",
        reply_markup=updated_kb
    )
    await callback.answer()

@router.callback_query(F.data == 'quit')
async def quit_dict(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await state.clear()